# Based on
# https://github.com/MicrosoftDocs/pipelines-anaconda/blob/3cf8252785ea2c873cc9c20e676b14f7b48f35ce/azure-pipelines.yml

variables:
  PACKAGE_NAME: zeroc-ice36-python
  # Set this to non-empty for testing
  # This will add .test to the version and also add a testing label
  VERSION_SUFFIX: .test
  # ANACONDA_USER: Dynmically set from another variable in stage conda_upload
  # ANACONDA_API_TOKEN: must be a secret variable

trigger:
  branches:
    include:
    - '*'
  tags:
    include:
    - '*'

stages:
- stage: check_anaconda_token
  jobs:
  - job:
    displayName: Check ANACONDA_API_TOKEN
    pool:
      vmImage: 'ubuntu-16.04'

    steps:
    - bash: echo "##vso[task.prependpath]$CONDA/bin"
      displayName: Add conda to PATH

    - bash: conda install -y conda-build anaconda-client
      displayName: Create Anaconda environment

    - bash: |
        set -eux
        anaconda -v whoami
      env:
        # Secret variables must be explicitly mapped
        ANACONDA_API_TOKEN: $(ANACONDA_API_TOKEN)
        # ANACONDA_API_TOKEN: $(ANACONDA_API_TOKEN_TEMPORARY)
      displayName: whoami ANACONDA_API_TOKEN

    - bash: |
        set -eux
        anaconda -v whoami
      env:
        # Secret variables must be explicitly mapped
        ANACONDA_API_TOKEN: $(ANACONDA_API_TOKEN_TEMPORARY)
      displayName: whoami ANACONDA_API_TOKEN_TEMPORARY

- stage: conda_build
  jobs:
  - job:
    displayName: ubuntu-16.04
    pool:
      vmImage: 'ubuntu-16.04'
    strategy:
      matrix:
        Python36:
          python.version: '3.6'
        Python37:
          python.version: '3.7'

    steps:
    - bash: echo "##vso[task.prependpath]$CONDA/bin"
      displayName: Add conda to PATH

    - bash: conda install -y conda-build anaconda-client
      displayName: Create Anaconda environment

    - bash: |
        conda info -a
        conda build --python $PYTHON_VERSION .
      displayName: build

    - publish: /usr/share/miniconda/conda-bld/linux-64
      artifact: linux-64-$(python.version)

  - job:
    displayName: macOS-10.14
    pool:
      vmImage: 'macOS-10.14'
    strategy:
      matrix:
        Python36:
          python.version: '3.6'
        Python37:
          python.version: '3.7'

    steps:
    - bash: echo "##vso[task.prependpath]$CONDA/bin"
      displayName: Add conda to PATH

    # xcode image is missing headers
    # https://github.com/travis-ci/travis-ci/issues/9640
    # https://docs.conda.io/projects/conda-build/en/latest/resources/compiler-tools.html#macos-sdk
    # Anaconda uses 1.9 but Ice 3.6.5 includes TLS 1.3 support which requires a more recent SecureTransport
    - bash: |
        sudo mkdir -p /opt
        pushd /opt
        curl -L https://github.com/phracker/MacOSX-SDKs/releases/download/10.13/MacOSX10.13.sdk.tar.xz | sudo tar xf -
        popd
      displayName: Download 10.13 SDK

    # Make writeable by non root
    - bash: sudo chown -R "$USER" /usr/local/miniconda
      displayName: Make miniconda directory writeable

    - bash: conda install -y conda-build anaconda-client
      displayName: Create Anaconda environment

    - bash: |
        conda info -a
        conda build --python $PYTHON_VERSION .
      displayName: build

    - publish: /usr/local/miniconda/conda-bld/osx-64
      artifact: osx-64-$(python.version)

  - job:
    displayName: vs2017-win2016
    pool:
      vmImage: 'vs2017-win2016'
    strategy:
      matrix:
        Python36:
          python.version: '3.6'
        Python37:
          python.version: '3.7'

    steps:
    - powershell: Write-Host "##vso[task.prependpath]$env:CONDA\Scripts"
      displayName: Add conda to PATH

    - script: conda install -y conda-build anaconda-client
      displayName: Create Anaconda environment

    - script: |
        call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        conda info -a
        conda build --python %PYTHON_VERSION% .
      displayName: build

    - publish: C:\Miniconda\conda-bld\win-64
      artifact: win-64-$(python.version)

- stage: conda_upload
  jobs:
  - deployment: anaconda_cloud_upload
    displayName: Anaconda Cloud upload
    pool:
      vmImage: 'Ubuntu-16.04'
    # creates an environment if it doesn't exist
    environment: 'conda'
    # Deploy Tags only (comment out if you want to test with a branch)
    # condition: startsWith(variables['build.sourceBranch'], 'refs/tags/')
    strategy:
      runOnce:
        deploy:
          steps:
          - bash: echo "##vso[task.prependpath]$CONDA/bin"
            displayName: Add conda to PATH

          - bash: conda install -y anaconda-client
            displayName: Create Anaconda environment

          - bash: |
              env
              ls -Rl $(Pipeline.Workspace)
            displayName: List artifacts

          - bash: |
              set -ex
              ANACONDA_USER=${BUILD_REPOSITORY_NAME%/*}
              if [ -z "$ANACONDA_API_TOKEN" ]; then
                echo ANACONDA_API_TOKEN required
                exit 1
              fi
              anaconda -v whoami
              for f in $(Pipeline.Workspace)/*/${PACKAGE_NAME}*.tar.bz2; do
                if [ -z "${VERSION_SUFFIX}" ]; then
                  anaconda upload --user ${ANACONDA_USER} $f
                else
                  anaconda -v upload --user ${ANACONDA_USER} $f --force -l testing
                  echo $?
                fi
              done
            env:
              # Secret variables must be explicitly mapped
              ANACONDA_API_TOKEN: $(ANACONDA_API_TOKEN)
            displayName: Upload artifacts
